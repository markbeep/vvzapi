"""init

Revision ID: 7724efb4d256
Revises: 
Create Date: 2025-10-15 06:28:56.310409

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel


# revision identifiers, used by Alembic.
revision: str = '7724efb4d256'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('lecturer',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('firstname', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('lastname', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('golden_owl', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('teachingunit',
    sa.Column('abstract', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('learning_objective', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('content', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('notice', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('competencies', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('lecture_notes', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('literature', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('other_data', sa.JSON(), nullable=True),
    sa.Column('two_semester_credits', sa.Float(), nullable=True),
    sa.Column('programme_regulations', sa.JSON(), nullable=True),
    sa.Column('together_with_number', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('ects_credits', sa.Float(), nullable=False),
    sa.Column('examiner_ids', sa.JSON(), nullable=True),
    sa.Column('assessment_type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('assessment_language', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('repetition', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('exam_block_of', sa.JSON(), nullable=True),
    sa.Column('mode', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('additional_info', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('written_aids', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('distance', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('digital', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('update_note', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('admission_requirement', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('other_assessment', sa.JSON(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('number', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('year', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('semester', sa.Enum('HS', 'FS', name='semesterenum'), nullable=False),
    sa.Column('text_language', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('language', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('offered_in', sa.JSON(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('teachingunit', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_teachingunit_name'), ['name'], unique=False)
        batch_op.create_index(batch_op.f('ix_teachingunit_number'), ['number'], unique=False)

    op.create_table('course',
    sa.Column('number', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('teaching_unit_id', sa.Integer(), nullable=False),
    sa.Column('slots', sa.JSON(), nullable=True),
    sa.Column('type', sa.Enum('V', 'G', 'U', 'S', 'K', 'P', 'A', 'D', 'R', name='coursetypeenum'), nullable=False),
    sa.Column('comments', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['teaching_unit_id'], ['teachingunit.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('number')
    )
    op.create_table('examlecturerrelations',
    sa.Column('teaching_unit_id', sa.Integer(), nullable=False),
    sa.Column('lecturer_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['lecturer_id'], ['lecturer.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['teaching_unit_id'], ['teachingunit.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('teaching_unit_id', 'lecturer_id')
    )
    op.create_table('courselecturerrelations',
    sa.Column('course_number', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('lecturer_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['course_number'], ['course.number'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['lecturer_id'], ['lecturer.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('course_number', 'lecturer_id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('courselecturerrelations')
    op.drop_table('examlecturerrelations')
    op.drop_table('course')
    with op.batch_alter_table('teachingunit', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_teachingunit_number'))
        batch_op.drop_index(batch_op.f('ix_teachingunit_name'))

    op.drop_table('teachingunit')
    op.drop_table('lecturer')
    # ### end Alembic commands ###
